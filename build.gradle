buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}
apply plugin: 'forge'

version = "1.3.0"
group = "ru.timeconqueror" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "SpongeMixins"

configurations {
    shade
    compile.extendsFrom shade
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10"
    runDir = "eclipse"
}

repositories {
    mavenCentral()
    maven {
        name = "sponge"
        url = "https://repo.spongepowered.org/maven/"
    }
}

dependencies {
    shade('org.spongepowered:mixin:0.7.11-SNAPSHOT') {
        // Mixin includes a lot of dependencies that are too up-to-date
        exclude module: 'launchwrapper'
        exclude module: 'guava'
        exclude module: 'gson'
        exclude module: 'commons-io'
        exclude module: 'log4j-core'
    }
}

jar {
    manifest {
        attributes([
                'FMLCorePluginContainsFMLMod': 'true',
                "FMLCorePlugin"              : "ru.timeconqueror.spongemixins.core.SpongeMixinsCore",
                "TweakOrder"                 : -2147483648,
                "ForceLoadAsMod"             : true
        ])
    }

    configurations.shade.copyRecursive().setTransitive(false).each { artifact ->
        from (zipTree(artifact)) {
            exclude "META-INF/*.RSA", "META-INF/*.SF", "META-INF/*.MF"
        }
    }
}

//tasks.jar.finalizedBy(shadowJar)
//
//shadowJar {
//    classifier = ""
//    configurations = [project.configurations.shade]
//    relocate "org.spongepowered", "shaded.org.spongepowered"
//}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task deobfJar(type: Jar) {
    from sourceSets.main.output

    classifier = 'dev'
}

artifacts {
    archives deobfJar
}
